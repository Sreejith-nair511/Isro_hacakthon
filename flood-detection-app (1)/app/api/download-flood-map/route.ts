import { type NextRequest, NextResponse } from "next/server"

export async function POST(request: NextRequest) {
  try {
    const { location, date, overlayImage } = await request.json()

    // In a real implementation, this would generate the actual flood map image
    // For now, we'll create a simple response that triggers download

    const canvas = new OffscreenCanvas(800, 600)
    const ctx = canvas.getContext("2d")

    if (ctx) {
      // Create a simple flood map visualization
      ctx.fillStyle = "#2D5016" // Dark green background (land)
      ctx.fillRect(0, 0, 800, 600)

      // Add some blue areas (water bodies)
      ctx.fillStyle = "#1E40AF"
      ctx.fillRect(100, 100, 200, 150)
      ctx.fillRect(500, 300, 150, 100)

      // Add red flood areas
      ctx.fillStyle = "rgba(255, 0, 0, 0.6)"
      ctx.fillRect(50, 400, 300, 150)
      ctx.fillRect(400, 200, 250, 200)

      // Add text overlay
      ctx.fillStyle = "white"
      ctx.font = "20px Arial"
      ctx.fillText(`Flood Detection: ${location}`, 20, 40)
      ctx.font = "14px Arial"
      ctx.fillText(`Date: ${new Date(date).toLocaleDateString()}`, 20, 70)
      ctx.fillText("Generated by India Flood Detection System", 20, 580)
    }

    const blob = await canvas.convertToBlob({ type: "image/png" })

    return new NextResponse(blob, {
      headers: {
        "Content-Type": "image/png",
        "Content-Disposition": `attachment; filename="flood-map-${location.replace(/[^a-zA-Z0-9]/g, "-")}.png"`,
      },
    })
  } catch (error) {
    console.error("Download error:", error)
    return NextResponse.json({ error: "Failed to generate flood map" }, { status: 500 })
  }
}
